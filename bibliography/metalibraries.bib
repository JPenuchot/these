@misc{ctre,
  author = {Hana {Dusíková}},
  title = {Compile Time Regular Expression in C++},
  url = {https://github.com/hanickadot/compile-time-regular-expressions},
  year = {2018},
}

@misc{cest,
  author = {Paul {Keir}},
  title = {Towards a constexpr version of the C++ standard library},
  url = {https://github.com/pkeir/cest},
  year = {2020},
}

@misc{ctpg,
  author = {Piotr {Winter}},
  title = {C++ Compile Time Parser Generator},
  url = {https://github.com/peter-winter/ctpg},
  year = {2021},
}

@misc{fmt,
  author = {Victor {Zverovich}},
  title = {A modern formatting library},
  url = {https://github.com/fmtlib/fmt},
  year = {2015},
}

@misc{blazelib,
  author = {Klaus {Iglberger}},
  title = {Blaze C++ Linear Algebra Library},
  url = {https://bitbucket.org/blaze-lib},
  year = {2012},
}

@article{eigen,
  title = {Eigen},
  author = {Guennebaud, Ga{\"e}l and Jacob, Benoit and others},
  url = {https://eigen.tuxfamily.org},
  volume = {3},
  year = {2010},
}

@article{iglberger2012_1,
  author = {Klaus {Iglberger} and Georg {Hager} and Jan {Treibig} and Ulrich {R{
            \"u}de}},
  title = {Expression Templates Revisited: A Performance Analysis of Current
           Methodologies},
  journal = {SIAM Journal on Scientific Computing},
  year = {2012},
  volume = {34(2)},
  pages = {C42--C69},
}

@inproceedings{iglberger2012_2,
  author = {Klaus {Iglberger} and Georg {Hager} and Jan {Treibig} and Ulrich {R{
            \"u}de}},
  title = {High Performance Smart Expression Template Math Libraries},
  booktitle = {Proceedings of the 2nd International Workshop on New Algorithms
               and Programming Models for the Manycore Era (APMM 2012) at HPCS
               2012},
  year = {2012},
}

@incollection{thrust,
  title = {Chapter 26 - Thrust: A Productivity-Oriented Library for CUDA},
  editor = {Wen-mei W. Hwu},
  booktitle = {GPU Computing Gems Jade Edition},
  publisher = {Morgan Kaufmann},
  address = {Boston},
  pages = {359-371},
  year = {2012},
  series = {Applications of GPU Computing Series},
  isbn = {978-0-12-385963-1},
  doi = {https://doi.org/10.1016/B978-0-12-385963-1.00026-5},
  url = {https://www.sciencedirect.com/science/article/pii/B9780123859631000265},
  author = {Nathan Bell and Jared Hoberock},
  abstract = {Publisher Summary This chapter demonstrates how to leverage the
              Thrust parallel template library to implement high performance
              applications with minimal programming effort. With the introduction
              of CUDA C/C++, developers can harness the massive parallelism of
              the graphics processing unit (GPU) through a standard programming
              language. CUDA allows developers to make fine-grained decisions
              about how computations are decomposed into parallel threads and
              executed on the device. The level of control offered by CUDA C/C++
              is an important feature; it facilitates the development of
              high-performance algorithms for a variety of computationally
              demanding tasks which merit significant optimization and profit
              from low-level control of the mapping onto hardware. With Thrust,
              developers describe their computation using a collection of
              high-level algorithms and completely delegate the decision of how
              to implement the computation to the library. Thrust is implemented
              entirely within CUDA C/C++ and maintains interoperability with the
              rest of the CUDA ecosystem. Interoperability is an important
              feature because no single language or library is the best tool for
              every problem. Thrust presents a style of programming emphasizing
              genericity and composability. Indeed, the vast majority of Thrust's
              functionality is derived from four fundamental parallel
              algorithms—for each, reduce, scan, and sort. Thrust's high-level
              algorithms enhance programmer productivity by automating the
              mapping of computational tasks onto the GPU. Thrust also boosts
              programmer productivity by providing a rich set of algorithms for
              common patterns.},
}

@misc{mpl,
  author = {Aleksey {Gurtovoy} and David {Abrahams}},
  title = {Boost.org mpl module},
  url = {https://boost.org/libs/mpl},
  year = {2002},
}

@misc{mp11,
  author = {Peter {Dimov}},
  title = {C++11 metaprogramming library},
  url = {https://boost.org/libs/mp11},
  year = {2015},
}

@misc{brigand,
  author = {Odin {Holmes} and Marek {Kurdej} and Jonathan {Poelen} and Joel {
            Falcou}},
  title = {Instant compile time C++ 11 metaprogramming library},
  url = {https://github.com/edouarda/brigand},
  year = {2015},
}

@misc{phoenix,
  author = {Joel de {Guzman} and Dan {Marsden} and Thomas {Heller} and John {
            Fletcher}},
  title = {Boost.org phoenix module},
  url = {https://github.com/boostorg/phoenix},
  year = {2002},
}

@misc{spirit,
  author = {Joel {de Guzman} and Hartmut {Kaiser}},
  title = {Boost.org spirit module},
  url = {https://github.com/boostorg/spirit},
  year = {2001},
}

@article{nt2,
  title = {NT2: Une biblioth{\`e}que haute-performance pour la vision
           artificielle NT2: A High-performance library for computer vision.},
  author = {Falcou, Jo{\"e}l and Laprest{\'e}, Jean-Thierry and Chateau, Thierry
            and S{\'e}rot, Jocelyn},
  url = {https://www.lrde.epita.fr/dload/seminar/2008-09-14/falcou-3.pdf},
}
