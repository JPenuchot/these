@misc{hpcs1,
  title = {Math kernel library (mkl).},
  author = {Intel},
  url = {https://www.intel.com/software/products/mkl/},
}

@misc{hpcs2,
  title = {Amd core math library (acml).},
  author = {AMD},
  url = {https://developer.amd.com/amd-cpu-libraries/amd-math-library-libm/},
}

@article{hpcs3,
  author = {Zee, Field G. Van and Chan, Ernie and Geijn, Robert A. van de and
            Quintana-Ortí, Enrique S. and Quintana-Ortí, Gregorio},
  journal = {Computing in Science and Engineering},
  title = {The libflame Library for Dense Matrix Computations},
  year = {2009},
  volume = {11},
  number = {6},
  pages = {56-63},
  doi = {10.1109/MCSE.2009.207},
}

@book{hpcs4,
  author = {Cole, Murray},
  title = {Algorithmic Skeletons: Structured Management of Parallel Computation},
  year = {1991},
  isbn = {0262530864},
  publisher = {MIT Press},
  address = {Cambridge, MA, USA},
}

@article{hpcs5,
  title = {Expression templates},
  author = {Veldhuizen, Todd},
  journal = {C++ Report},
  volume = {7},
  number = {5},
  pages = {26--31},
  year = {1995},
  publisher = {Citeseer},
}

% hpcs6:
% K. Czarnecki, K. Østerbye, and M. V ̈olter, “Generative program-
% ming,” in Object-Oriented Technology ECOOP 2002 Workshop Reader,
% J. Hern ́andez and A. Moreira, Eds. Berlin, Heidelberg: Springer Berlin
% Heidelberg, 2002, pp. 15–29.

@inproceedings{hpcs7,
  author = {Falcou, Joel and S\'{e}rot, Jocelyn and Pech, Lucien and Laprest\'{e
            }, Jean-Thierry},
  title = {Meta-Programming Applied to Automatic SMP Parallelization of Linear
           Algebra Code},
  year = {2008},
  isbn = {9783540854500},
  publisher = {Springer-Verlag},
  address = {Berlin, Heidelberg},
  url = {https://doi.org/10.1007/978-3-540-85451-7_78},
  doi = {10.1007/978-3-540-85451-7_78},
  abstract = {We describe a software solution to the problem of automatic
              parallelization of linear algebra code on multi-processor and
              multi-core architectures. This solution relies on the definition of
              a domain specific language for matrix computations, a performance
              model for multi-processor architectures and its implementation
              using C++ template meta-programming. Experimental results asses
              this model and its implementation on sample computation kernels.},
  booktitle = {Proceedings of the 14th International Euro-Par Conference on
               Parallel Processing},
  pages = {729–738},
  numpages = {10},
  location = {Las Palmas de Gran Canaria, Spain},
  series = {Euro-Par '08},
}

@book{hpcs8,
  author = {Czarnecki, Krzysztof and Eisenecker, Ulrich W.},
  title = {Generative Programming: Methods, Tools, and Applications},
  year = {2000},
  isbn = {0201309777},
  publisher = {ACM Press/Addison-Wesley Publishing Co.},
  address = {USA},
}

@book{hpcs9,
  author = {Abrahams, David and Gurtovoy, Aleksey},
  title = {C++ Template Metaprogramming: Concepts, Tools, and Techniques from
           Boost and Beyond (C++ in Depth Series)},
  year = {2004},
  isbn = {0321227255},
  publisher = {Addison-Wesley Professional},
  abstract = {C++ Template Metaprogramming sheds light on the most powerful
              idioms of today's C++, at long last delivering practical
              metaprogramming tools and techniques into the hands of the everyday
              programmer.A metaprogram is a program that generates or manipulates
              program code. Ever since generic programming was introduced to C++,
              programmers have discovered myriad "template tricks" for
              manipulating programs as they are compiled, effectively eliminating
              the barrier between program and metaprogram. While excitement among
              C++ experts about these capabilities has reached the community at
              large, their practical application remains out of reach for most
              programmers. This book explains what metaprogramming is and how it
              is best used. It provides the foundation you'll need to use the
              template metaprogramming effectively in your own work.This book is
              aimed at any programmer who is comfortable with idioms of the
              Standard Template Library (STL). C++ power-users will gain a new
              insight into their existing work and a new fluency in the domain of
              metaprogramming. Intermediate-level programmers who have learned a
              few advanced template techniques will see where these tricks fit in
              the big picture and will gain the conceptual foundation to use them
              with discipline. Programmers who have caught the scent of
              metaprogramming, but for whom it is still mysterious, will finally
              gain a clear understanding of how, when, and why it works. All
              readers will leave with a new tool of unprecedented power at their
              disposal-the Boost Metaprogramming Library.The companion CD-ROM
              contains all Boost C++ libraries, including the Boost
              Metaprogramming Library and its reference documentation, along with
              all of the book's sample code and extensive supplementary material.
              },
}

% hpcs10:
% W. Bright, “Templates revisited - d programming language.” [Online].
% Available: https://dlang.org/articles/templates-revisited.html

% hpcs11:
% W. Taha, A Gentle Introduction to Multi-stage Programming. Berlin,
% Heidelberg: Springer Berlin Heidelberg, 2004, pp. 30–50.

% hpcs12:
% T. Sheard and S. P. Jones, “Template metaprogramming for haskell,”
% SIGPLAN Not., vol. 37, no. 12, pp. 60–75, Dec. 2002.

% hpcs13:
% R. Keryell, R. Reyes, and L. Howes, “Khronos sycl for opencl: A
% tutorial,” in Proceedings of the 3rd International Workshop on OpenCL,
% ser. IWOCL ’15. New York, NY, USA: ACM, 2015, pp. 24:1–24:1.
% [Online]. Available: http://doi.acm.org/10.1145/2791321.2791345

% hpcs14:
% F. G. Van Zee and R. A. van de Geijn, “Blis: A framework for
% rapidly instantiating blas functionality,” ACM Trans. Math. Softw.,
% vol. 41, no. 3, pp. 14:1–14:33, Jun. 2015. [Online]. Available:
% http://doi.acm.org/10.1145/2764454

% hpcs15:
% D. G. Spampinato and M. P ̈uschel, “A basic linear algebra compiler for
% structured matrices,” in International Symposium on Code Generation
% and Optimization (CGO), 2016, pp. 117–127.

% hpcs16:
% A. Gurtovoy and D. Abrahams, “The boost c++ metaprogramming
% library,” 2002.

% hpcs17:
% P. Est ́erie, J. Falcou, M. Gaunard, and J.-T. Laprest ́e, “Boost.simd:
% Generic programming for portable simdization,” in Proceedings of the
% 2014 Workshop on Programming Models for SIMD/Vector Processing,
% ser. WPMVP ’14. New York, NY, USA: ACM, 2014, pp. 1–8.

% hpcs18:
% E. Anderson, Z. Bai, C. Bischof, L. S. Blackford, J. Demmel, J. J.
% Dongarra, J. Du Croz, S. Hammarling, A. Greenbaum, A. McKenney,
% and D. Sorensen, LAPACK Users’ Guide (Third Ed.). Philadelphia, PA,
% USA: Society for Industrial and Applied Mathematics, 1999.

% hpcs19:
% S. Tomov, R. Nath, and J. Dongarra, “Accelerating the reduction to upper
% hessenberg, tridiagonal, and bidiagonal forms through hybrid gpu-based
% computing,” Parallel Computing, vol. 36, no. 12, pp. 645 – 654, 2010.

% hpcs20:
% T. Dong, A. Haidar, S. Tomov, and J. Dongarra, “Optimizing the
% svd bidiagonalization process for a batch of small matrices,” Procedia
% Computer Science, vol. 108, pp. 1008 – 1018, 2017, international
% Conference on Computational Science, ICCS 2017, 12-14 June 2017,
% Zurich, Switzerland.

% hpcs21:
% [Online]. Available: http://www.openblas.net

% hpcs22:
% R. M. Stallman and G. DeveloperCommunity, Using The Gnu Compiler
% Collection: A Gnu Manual For Gcc Version 4.3.3. Paramount, CA:
% CreateSpace, 2009.

% hpcs23:
% Q. Wang, X. Zhang, Y. Zhang, and Q. Yi, “Augem: Automatically
% generate high performance dense linear algebra kernels on x86 cpus,”
% in Proceedings of the International Conference on High Performance
% Computing, Networking, Storage and Analysis, ser. SC ’13. New York,
% NY, USA: ACM, 2013, pp. 25:1–25:12.
