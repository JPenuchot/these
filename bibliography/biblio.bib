@article{more-constexpr-containers,
  title = {More constexpr containers},
  author = {Peter Dimov and Louis Dionne and Nina Ranns and Richard Smith and
            Daveed Vandevoorde},
  year = {2019},
  url = {https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html},
}

@article{clangjit,
  author = {Hal Finkel and David Poliakoff and David F. Richards},
  title = {ClangJIT: Enhancing {C++} with Just-in-Time Compilation},
  journal = {CoRR},
  volume = {abs/1904.08555},
  year = {2019},
  url = {https://arxiv.org/abs/1904.08555},
  archivePrefix = {arXiv},
  eprint = {1904.08555},
  timestamp = {Fri, 26 Apr 2019 13:18:53 +0200},
  biburl = {https://dblp.org/rec/journals/corr/abs-1904-08555.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org},
}

@article{julia,
  author = {Bezanson, Jeff and Chen, Jiahao and Chung, Benjamin and Karpinski,
            Stefan and Shah, Viral B. and Vitek, Jan and Zoubritzky, Lionel},
  title = {Julia: Dynamism and Performance Reconciled by Design},
  year = {2018},
  issue_date = {November 2018},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {2},
  number = {OOPSLA},
  url = {https://doi.org/10.1145/3276490},
  doi = {10.1145/3276490},
  abstract = {Julia is a programming language for the scientific community that
              combines features of productivity languages, such as Python or
              MATLAB, with characteristics of performance-oriented languages,
              such as C++ or Fortran. Julia's productivity features include:
              dynamic typing, automatic memory management, rich type annotations,
              and multiple dispatch. At the same time, Julia allows programmers
              to control memory layout and leverages a specializing just-in-time
              compiler to eliminate much of the overhead of those features. This
              paper details the design choices made by the creators of Julia and
              reflects on the implications of those choices for performance and
              usability.},
  journal = {Proc. ACM Program. Lang.},
  month = {oct},
  articleno = {120},
  numpages = {23},
  keywords = {just-in-time compilation, dynamic languages, multiple dispatch},
}

@article{hpx,
  doi = {10.21105/joss.02352},
  url = {https://doi.org/10.21105/joss.02352},
  year = {2020},
  publisher = {The Open Journal},
  volume = {5},
  number = {53},
  pages = {2352},
  author = {Hartmut Kaiser and Patrick Diehl and Adrian S. Lemoine and Bryce
            Adelstein Lelbach and Parsa Amini and Agust√≠n Berge and John
            Biddiscombe and Steven R. Brandt and Nikunj Gupta and Thomas Heller
            and Kevin Huck and Zahra Khatami and Alireza Kheirkhahan and Auriane
            Reverdell and Shahrzad Shirzad and Mikael Simberg and Bibek Wagle and
            Weile Wei and Tianyi Zhang},
  title = {HPX - The C++ Standard Library for Parallelism and Concurrency},
  journal = {Journal of Open Source Software},
}

@misc{stdembed,
  author = {JeanHeyd Meneide},
  title = {P1040R6: std::embed and \#depend},
  url = {https://wg21.link/p1040r6},
  year = {2020},
  abstract
  month = {2},
  publisher = {WG21},
}
